pipeline {
    agent any
    
    environment {
        NODE_VERSION = '18'
        NVM_DIR = sh(script: 'echo $([ -z "${XDG_CONFIG_HOME-}" ] && echo ${HOME}/.nvm || echo ${XDG_CONFIG_HOME}/nvm)', returnStdout: true).trim()
    }

    stages {
        stage('Checkout') {
            steps {
                checkout([$class: 'GitSCM', branches: [[name: '*/DevOps']], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[url: 'https://github.com/wanghuil/OrderHere-frontend.git']]])

                // Optional: Print the contents of the directory for debugging
                sh 'ls -la'
            }
        }

        stage('Install Node.js and npm') {
            steps {
                script {
                    // Check if NVM is installed
                    def nvmInstalled = sh(script: 'command -v nvm', returnStatus: true)
                    if (nvmInstalled != 0) {
                        // Install NVM
                        sh 'curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.1/install.sh | bash'
                        sh 'export NVM_DIR="$([ -z "${XDG_CONFIG_HOME-}" ] && echo ${HOME}/.nvm || echo ${XDG_CONFIG_HOME}/nvm)"'
                        sh '[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"'
                    }

                    // Check if Node.js is installed
                    def nodeInstalled = sh(script: 'command -v node', returnStatus: true)
                    if (nodeInstalled != 0) {
                        // Install Node.js and npm
                        sh "nvm install $NODE_VERSION"
                        sh "nvm use $NODE_VERSION"
                    }
                }
            }
        }

        stage('Build') {
            steps {
                // Install dependencies and build your application
                sh 'npm install'
                sh 'npm run build'
            }
        }
        
        stage('Test') {
            steps {
                // Run your tests
                sh 'npm run test'
            }
        }
    }
}
